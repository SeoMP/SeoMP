<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
	<!-- 资源属性文件读入 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:config/db.properties</value>
			</list>
		</property>
	</bean>
	<!-- 数据源配置 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<!-- 驱动 -->
		<property name="driverClass" value="${MySQL.Driver}"></property>
		<!-- 连接数据库的url -->	
		<property name="jdbcUrl" value="${MySQL.Url}"></property>
		<!-- 连接的数据库的用户名 -->
		<property name="user" value="${MySQL.User}"></property>
		<!-- 连接的数据库的密码 -->
		<property name="password" value="${MySQL.Password}"></property>
		<!-- 数据库连接池的最大连接数-->
		<property name="maxPoolSize" value="30"></property>
		<!-- 数据库连接池的最小连接数-->
		<property name="minPoolSize" value="1"></property>
		<!-- 数据库连接池的初始化连接数-->
		<property name="initialPoolSize" value="2"></property>
		<!-- 数据库连接池的连接最大空闲时间(s)-->
		<property name="maxIdleTime" value="30"></property>
	</bean>
	<!-- 定义Hibernate的sessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- PO映射文件列表配置 -->
		<property name="mappingLocations">
			<list>
				<value>classpath:orm/hbm/*.hbm.xml</value>
			</list>
		</property>
		<!-- hibernate属性配置 -->
		<property name="hibernateProperties">
			<value>
				<!-- InnoDB-MySQL5.7的默认存储引擎 -->
				hibernate.dialect=org.hibernate.dialect.MySQLInnoDBDialect
				<!-- 是否在控制台hibernate输出的sql -->
				hibernate.show_sql=true
				<!-- 是否格式化sql -->
				hibernate.format_sql=true
				<!-- 是否自动提交 -->
				hibernate.connection.autocommit=false
				<!-- 禁用二级缓存 -->
				hibernate.cache.use_second_level_cache=false
				<!-- 是否根据Hibernate映射创建数据库表 -->
				hibernate.hbm2ddl.auto=update
			</value>
		</property>
	</bean>
	<!-- 使用声明式事务管理 -->
	<!-- 配置hibernate局部事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory">
		</property>
	</bean>
	<!-- 通过利用TransactionProxyFactoryBean为目标bean生成代理bean，织入事务处理，但是只能指定一个bean的配置，如果较多，则配置繁琐 -->
	<!-- <bean id="userDealBizProxy" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		为事务代理工厂注入事务管理器及目标对象
		<property name="transactionManager" ref="transactionManager"></property>
		<property name="target" ref="userDealBiz"></property>
		定义事务属性
		<property name="transactionAttributes">
			<props>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean> -->		
	
	<!-- 配置事务增强处理Bean： 通过定义切点（配置切点表达式）并织入事务增强处理，这种方式可以减少 xml配置-->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- 定义事务语义：
			事务传播属性propagation、
			事务隔离属性isolation、
			事物超时属性timeout、
			只读属性read-only、
			对指定异常回滚rollback-for:指定触发事务回滚的异常类，使用全限定名，以','隔开多个异常类、
			对指定异常不回滚no-rollback-for:指定不触发事务回滚的异常类，使用全限定名，以','隔开多个异常类		
		-->
		<tx:attributes>
            <tx:method name="query*" read-only="true" propagation="SUPPORTS" 
            	isolation="DEFAULT" timeout="10" />
            <tx:method name="get*" read-only="true" propagation="SUPPORTS" 
            	isolation="DEFAULT" timeout="10" />
			<tx:method name="update*" propagation="REQUIRED" isolation="DEFAULT" 
			timeout="5" rollback-for="com.seoo.exception.CommonException"/>
			<tx:method name="delete*" propagation="REQUIRED" isolation="DEFAULT" 
			timeout="5" rollback-for="com.seoo.exception.CommonException"/>
			<tx:method name="save*" propagation="REQUIRED" isolation="READ_COMMITTED" 
			timeout="5" rollback-for="com.seoo.exception.CommonException"/>
		</tx:attributes>
	</tx:advice>
	<!-- 事务切点 :Aop为com.seoo.service下所有业务逻辑处理类的所有方法织入了事务增强处理-->
	<aop:config>
		<!-- 包com.seoo.service下所有业务逻辑处理类的任意方法作为切入点 -->
        <aop:pointcut id="bizPoint" expression="execution(* com.seoo.service.impl.*.*(..))"/>
        <!-- 指定在bizPoint切入点应用txAdvice事务增强 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="bizPoint"/>
	</aop:config>
	
	<!-- 配置action实现类-->
	<bean id="loginInDealAction" class="com.seoo.action.LoginInDealAction">
		<property name="userBiz" ref="userDealBiz"></property>
	</bean>
	<bean id="userDealBiz" class="com.seoo.service.impl.UserDealServiceImpl">
		<property name="dao" ref="userDealDao"></property>
	</bean>
	<bean id="userDealDao" class="com.seoo.dao.impl.UserDealDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
</beans>